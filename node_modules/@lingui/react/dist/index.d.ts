import React, { ComponentType, FunctionComponent } from 'react';
import { I18n } from '@lingui/core';

type TransRenderProps = {
    id: string;
    translation: React.ReactNode;
    children: React.ReactNode;
    message?: string | null;
    isTranslated: boolean;
};
type TransRenderCallbackOrComponent = {
    component?: undefined;
    render?: (props: TransRenderProps) => React.ReactElement<any, any> | null;
} | {
    component?: React.ComponentType<TransRenderProps> | null;
    render?: undefined;
};
type TransProps = {
    id: string;
    message?: string;
    values?: Record<string, unknown>;
    components?: {
        [key: string]: React.ElementType | any;
    };
    formats?: Record<string, unknown>;
    comment?: string;
    children?: React.ReactNode;
} & TransRenderCallbackOrComponent;
declare function Trans(props: TransProps): React.ReactElement<any, any> | null;

type I18nContext = {
    i18n: I18n;
    defaultComponent?: ComponentType<TransRenderProps>;
};
type I18nProviderProps = I18nContext & {
    children?: React.ReactNode;
};
declare const LinguiContext: React.Context<I18nContext>;
declare function useLingui(): I18nContext;
declare const I18nProvider: FunctionComponent<I18nProviderProps>;

export { I18nContext, I18nProvider, I18nProviderProps, LinguiContext, Trans, TransProps, TransRenderCallbackOrComponent, TransRenderProps, useLingui };
